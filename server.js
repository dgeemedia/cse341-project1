// server.js
// Entrypoint: sets up middleware, routes, swagger UI, and starts server after DB init.

require('dotenv').config();
const express = require('express');
const path = require('path');
const cors = require('cors');

// body-parser is in your package.json; express has built-in parsers too.
// We'll prefer express.json() but also register body-parser as a harmless fallback.
const bodyParser = require('body-parser');

// Your DB helper: expected to export initDb(callback) and getDb()
const mongodb = require('./data/database');

// Optional route groups (keep them if present)
const professionalRoutes = require('./routes/professional');
const videosRoutes = require('./routes/videos');

// Swagger UI loader
const swaggerUi = require('swagger-ui-express');
let swaggerDocument;
try {
  swaggerDocument = require('./swagger.json'); // generated by swagger.js
} catch (err) {
  swaggerDocument = null;
}

const app = express();
const port = process.env.PORT || 3000;

/*
 * IMPORTANT: register body-parsing middlewares BEFORE mounting routes
 * so req.body is populated for all route handlers (Swagger and curl).
 */
app.use(cors());

// Preferred: built-in parsers (modern Express)
app.use(express.json()); // parse application/json
app.use(express.urlencoded({ extended: true })); // parse application/x-www-form-urlencoded

// Fallback: body-parser (safe even if redundant)
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Serve static frontend (if you have it)
app.use(express.static(path.join(__dirname, 'frontend')));

// Mount example route groups (if present)
if (professionalRoutes) app.use('/professional', professionalRoutes);
if (videosRoutes) app.use('/videos', videosRoutes);

// Mount API routes - make sure routes/index.js uses router.use('/contacts', require('./contacts'))
app.use('/', require('./routes'));

// Mount Swagger UI (only if swagger.json exists in project root)
if (swaggerDocument) {
  app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));
} else {
  console.warn('swagger.json not found â€” run `npm run swagger` to generate it (see swagger.js).');
}

// Generic error handler (logs and returns 500)
app.use((err, req, res, next) => {
  console.error('Unhandled error:', err);
  res.status(500).json({ error: 'Server error' });
});

// Start server only after DB has initialized
mongodb.initDb((err) => {
  if (err) {
    console.error('Database initialization failed:', err);
    process.exit(1);
  } else {
    console.log('Database initialized!');
    app.listen(port, () => {
      console.log(`App listening on http://localhost:${port}`);
      console.log(`API docs (if present): http://localhost:${port}/api-docs`);
    });
  }
});
